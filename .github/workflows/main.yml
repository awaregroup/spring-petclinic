name: Java CI/CD with Maven and Azure Spring Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering, refs https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  workflow_dispatch:
    
env:
  AZURE_SUBSCRIPTION_ID: 'cfe96ac1-4cd0-40ad-9751-b18802bf8822'
  
  DEV_KEY_VAULT_NAME: 'kvossonazurejavaspringde'
  DEV_APP_NAME: 'pet-clinic-1'
  DEV_APP_SERVICE: 'ossonazure-javaspring-host-dev'
  
  PROD_APP_NAME: 'pet-clinic-2'
  PROD_APP_SERVICE: 'ossonazure-javaspring-host-prod'
  PROD_RG_NAME: 'OssOnAzure-JavaSpring-Prod'
  
  PRIMARY_DEPLOYMENT_REGION_NAME: 'southeastasia'

jobs:
  build_test_and_package:
    runs-on: ubuntu-latest
    
    name: Build, Test, and Package application for deployment
    
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@v2

      - uses: actions/setup-java@v3
        name: 'Set JDK version'
        with:
          distribution: 'microsoft'
          java-version: '17'
          
      - name: Run Maven clean and package (build)
        run: |
          mvn clean package -DskipTests
          
      - name: Run the tests via Maven
        run: |
          mvn test
          
      - name: Publish test results
        uses: ScaCap/action-surefire-report@v1.0.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload the Pet Clinic application artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: pet-clinic-app
          path: ${{ github.workspace }}/target/*.jar
          if-no-files-found: error
          
      - name: Upload the Bicep template artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: bicep-template
          path: ${{ github.workspace }}/azuredeploy.bicep
          if-no-files-found: error
          
  deploy_to_dev:
    runs-on: ubuntu-latest
    
    name: Deploy to the Dev environment
    
    # Only run on pushes to the "main" branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    needs: [build_test_and_package]
    
    steps:
      - name: Download the Pet Clinic application artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: pet-clinic-app

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SP_GITHUBACTIONS_WORKFLOW_PETCLINIC_APP_DEV_RESOURCE_GROUP }}
          
      - name: Do Azure CLI things
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az account show
            az storage -h
            az deployment group create
          
      - name: Retrive values from Azure Key Vault
        run: |
          # Get the values from Azure Key Vault and store in environment variables
          export POSTGRES_URL=$(az keyvault secret show --name "POSTGRESQL-PetClinic-ConnectionString" --vault-name ${{ env.DEV_KEY_VAULT_NAME }} --query "value")
          export POSTGRES_PASS=$(az keyvault secret show --name "POSTGRESQL-PetClinic-Password" --vault-name ${{ env.DEV_KEY_VAULT_NAME }} --query "value")
          export POSTGRES_USER=$(az keyvault secret show --name "POSTGRESQL-PetClinic-Username" --vault-name ${{ env.DEV_KEY_VAULT_NAME }} --query "value")
          
          # Set env vars for subsequent steps as per https://docs.github.com/en/github-ae@latest/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          echo "POSTGRES_URL=$POSTGRES_URL" >> $GITHUB_ENV
          echo "POSTGRES_PASS=$POSTGRES_PASS" >> $GITHUB_ENV
          echo "POSTGRES_USER=$POSTGRES_USER" >> $GITHUB_ENV
          
      - name: Deploy Pet Clinic application to the Dev environment
        uses: Azure/spring-apps-deploy@v1
        with:
          azure-subscription: ${{ env.AZURE_SUBSCRIPTION_ID }}
          action: deploy
          service-name: ${{ env.DEV_APP_SERVICE }}
          app-name: ${{ env.DEV_APP_NAME }}
          use-staging-deployment: false
          package: ${{ github.workspace }}/*.jar
          environment-variables: -POSTGRES_USER ${{ env.POSTGRES_USER }} -POSTGRES_PASS ${{ env.POSTGRES_PASS }} -POSTGRES_URL ${{ env.POSTGRES_URL }} -SPRING_PROFILES_ACTIVE postgres
        
  deploy_to_prod:
    runs-on: ubuntu-latest

    name: Deploy to the Production environment

    # Only run on pushes to the "main" branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    needs: [deploy_to_dev]

    steps:
      - name: Download the Pet Clinic application artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: pet-clinic-app
          
      - name: Download the Bicep template artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: bicep-template

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SP_GITHUBACTIONS_WORKFLOW_PETCLINIC_APP_PROD_RESOURCE_GROUP }}
          
#      - name: Deploy infrastructure to the Prod environment
#        uses: Azure/cli@v1.0.7
#        with:
#          inlineScript: |
#            az deployment group create --resource-group ${{ env.PROD_RG_NAME }} --name 'automated-deploy-from-github-actions-run${{ github.run_number }}-attempt${{ github.run_attempt }}' --template-file ${{ github.workspace }}/azuredeploy.bicep --parameters springAppServiceName=${{ env.PROD_APP_SERVICE }} springAppInstanceName=${{ env.PROD_APP_NAME }} resourceLocationName=${{ env.PRIMARY_DEPLOYMENT_REGION_NAME }} --verbose
          
      - name: Deploy infrastructure to the Prod environment
        uses: Azure/arm-deploy@v1.0.9
        with:
          scope: 'resourcegroup'
          resourceGroupName: ${{ env.PROD_RG_NAME }}
          template: ${{ github.workspace }}/azuredeploy.bicep
          deploymentMode: Incremental
          deploymentName: 'automated-deploy-from-github-actions-run${{ github.run_number }}-attempt${{ github.run_attempt }}'
          parameters: springAppServiceName=${{ env.PROD_APP_SERVICE }} springAppInstanceName=${{ env.PROD_APP_NAME }} resourceLocationName=${{ env.PRIMARY_DEPLOYMENT_REGION_NAME }}
          failOnStdErr: true
          
